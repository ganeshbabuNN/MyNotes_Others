GitFlow
Git technology

Git Flow
========
-Git flow is the set of guidelines that developers can follow when using Git.
-it is a standard for an ideal project. So that a developer would easily understand the things
-It is referred to as Branching Model by the developers and works as a central repository for a project

There are different types of branches in a project.According to the standard branching strategy and release management, there can be following types of branches
1)Master
2)Develop
3)Hotfixes
4)Release branches
5)Feature branches

refer branching_model.png

The Main Branches
-----------------
Two of the branching model's branches are considered as main branches of the project. These branches are as follows:
1)master
2)develop

Master Branch
-------------
-The master branch is the main branch of the project that contains all the history of final changes. Every developer must be used to the master branch. The master branch contains the source code of HEAD that always reflects a final version of the project
-Your local repository has its master branch that always up to date with the master of a remote repository.
-It is suggested not to mess with the master. If you edited the master branch of a group project, your changes would affect everyone else, and very quickly, there will be merge conflicts.

Develop Branch
--------------
-It is parallel to the master branch. It is also considered as the main branch of the project. This branch contains the latest delivered development changes for the next release. It has the final source code for the release. It is also called as a "integration branch."
-When the develop branch reaches a stable point and is ready to release, it should be merged with master and tagged with a release version.

Supportive Branches
------------------
-The development model needs a variety of supporting branches for the parallel development, tracking of features, assist in quick fixing and release, and other problems. These branches have a limited lifetime and are removed after the uses.
-The different types of supportive branches, we may use are as follows:
-Feature branches
-Release branches
-Hotfix branches

-Each of these branches is made for a specific purpose and have some merge targets. These branches are significant for a technical perspective.

Feature Branches
*--------------*
-Feature branches can be considered as topic branches. It is used to develop a new feature for the next version of the project. The existence of this branch is limited; it is deleted after its feature has been merged with develop branch.

refer Feature_branches.png

Release branches
*--------------*
-The release branch is created for the support of a new version release
-Senior developers will create a release branch.
-The release branch will contain the predetermined amount of the feature branch
-Developers are allowed for minor bug fixing and preparing meta-data for a release on this branch. After all these tasks, it can be merged with the develop branch.
When all the targeted features are created, then it can be merged with the develop branch. Some usual standard of the release branch are as follows:
-Generally, senior developers will create a release branch.
-The release branch will contain the predetermined amount of the feature branch.
-The release branch should be deployed to a staging server for testing.
-Any bugs that need to be improved must be addressed at the release branch.
-The release branch must have to be merged back into developing as well as the master branch.
-After merging, the release branch with the develop branch must be tagged with a version number.

Hotfix Branches
*-------------*
-Hotfix branches are similar to Release branches; both are created for a new production release.
-The hotfix branches arise due to immediate action on the project. In case of a critical bug in a production version, a hotfix branch may branch off in your project. After fixing the bug, this branch can be merged with the master branch with a tag.

Refer hotfix Branches.png

Git technology
==============
Git is a tool that covered vast terminology and jargon, which can often be difficult for new users

Branch
------
A branch is a version of the repository that diverges from the main working project. It is an essential feature available in most modern version control systems. A Git project can have more than one branch. We can perform many operations on Git branch-like rename, list, delete, etc

Checkout
--------
In Git, the term checkout is used for the act of switching between different versions of a target entity. The git checkout command is used to switch between branches in a repository

Cherry-Picking
--------------
Cherry-picking in Git is meant to apply some commit from one branch into another branch. In case you made a mistake and committed a change into the wrong branch, but do not want to merge the whole branch. You can revert the commit and cherry-pick it on another branch

Clone
-----
The git clone is a Git command-line utility. It is used to make a copy of the target repository or clone it. If I want a local copy of my repository from GitHub, this tool allows creating a local copy of that repository on your local directory from the repository URL

Fetch
-----
It is used to fetch branches and tags from one or more other repositories, along with the objects necessary to complete their histories. It updates the remote-tracking branches

HEAD
----
HEAD is the representation of the last commit in the current checkout branch. We can think of the head like a current branch. When you switch branches with git checkout, the HEAD revision changes, and points the new branch

Index
-----
The Git index is a staging area between the working directory and repository. It is used as the index to build up a set of changes that you want to commit together

Master
------
Master is a naming convention for Git branch. It's a default branch of Git. After cloning a project from a remote server, the resulting local repository contains only a single local branch. This branch is called a "master" branch. It means that "master" is a repository's "default" branch.

Merge
-----
Merging is a process to put a forked history back together. The git merge command facilitates you to take the data created by git branch and integrate them into a single branch.

Origin
-----
In Git, "origin" is a reference to the remote repository from a project was initially cloned. More precisely, it is used instead of that original repository URL to make referencing much easier.


Pull/Pull Request
-----------------
The term Pull is used to receive data from GitHub. It fetches and merges changes on the remote server to your working directory. The git pull command is used to make a Git pull.

Pull requests are a process for a developer to notify team members that they have completed a feature. Once their feature branch is ready, the developer files a pull request via their remote server account. Pull request announces all the team members that they need to review the code and merge it into the master branch.

Push
----
The push term refers to upload local repository content to a remote repository. Pushing is an act of transfer commits from your local repository to a remote repository. Pushing is capable of overwriting changes; caution should be taken when pushing.


Rebase
------
In Git, the term rebase is referred to as the process of moving or combining a sequence of commits to a new base commit. Rebasing is very beneficial and visualized the process in the environment of a feature branching workflow

Remote
------
In Git, the term remote is concerned with the remote repository. It is a shared repository that all team members use to exchange their changes.

Repository
----------
In Git, Repository is like a data structure used by VCS to store metadata for a set of files and directories. It contains the collection of the file as well as the history of changes made to those files. Repositories in Git is considered as your project folder.

Stashing
--------
Sometimes you want to switch the branches, but you are working on an incomplete part of your current project. You don't want to make a commit of half-done work. Git stashing allows you to do so. The git stash command enables you to switch branch without committing the current branch

Tag
---
Tags make a point as a specific point in Git history. It is used to mark a commit stage as important. We can tag a commit for future reference. Primarily, it is used to mark a projects initial point like v1.1
There are two types of tags.

Light-weighted tag
Annotated tag

Upstream And Downstream
-----------------------
The term upstream and downstream is a reference of the repository. Generally, upstream is where you cloned the repository from (the origin) and downstream is any project that integrates your work with other works

Git Revert
----------
In Git, the term revert is used to revert some commit. To revert a commit, git revert command is used. It is an undo type command. However, it is not a traditional undo alternative

Git Reset
---------
In Git, the term reset stands for undoing changes. The git reset command is used to reset the changes. The git reset command has three core forms of invocation. These forms are as follows.
Soft
Mixed
Hard

Git Ignore
----------
In Git, the term ignore used to specify intentionally untracked files that Git should ignore. It doesn't affect the Files that already tracked by Git.

Git Diff
--------
Git diff is a command-line utility. It's a multiuse Git command. When it is executed, it runs a diff function on Git data sources. These data sources can be files, branches, commits, and more. It is used to show changes between commits, commit, and working tree, etc.


Git Cheat Sheet
---------------
A Git cheat sheet is a summary of Git quick references. It contains basic Git commands with quick installation. A cheat sheet or crib sheet is a brief set of notes used for quick reference. Cheat sheets are so named because the people may use it without no prior knowledge.


Git Flow
--------
GitFlow is a branching model for Git, developed by Vincent Driessen. It is very well organized to collaborate and scale the development team. Git flow is a collection of Git commands. It accomplishes many repository operations with just single commands.


Git Squash
----------
In Git, the term squash is used to squash previous commits into one. Git squash is an excellent technique to group-specific changes before forwarding them to others. You can merge several commits into a single commit with the powerful interactive rebase command

Git Rm
------
In Git, the term rm stands for remove. It is used to remove individual files or a collection of files. The key function of git rm is to remove tracked files from the Git index. Additionally, it can be used to remove files from both the working directory and staging index.

Git Fork
--------
A fork is a rough copy of a repository. Forking a repository allows you to freely test and debug with changes without affecting the original project.

Great use of using forks to propose changes for bug fixes. To resolve an issue for a bug that you found, you can:

Fork the repository.
Make the fix.
Forward a pull request to the project owner.


Quiz
====

Assignment
==========


Resources:
=========